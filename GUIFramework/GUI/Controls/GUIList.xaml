<!-- ReSharper disable Xaml.RedundantAttachedProperty -->
<!-- ReSharper disable Xaml.StaticResourceNotResolved -->
<!-- ReSharper disable Xaml.BindingWithoutContextNotResolved -->
<base:GUIDraggableListView x:Class="GUIFramework.GUI.GUIList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
		     xmlns:base="clr-namespace:GUIFramework.GUI"
                           xmlns:messageObjects="clr-namespace:MessageFramework.DataObjects;assembly=MPDisplay.MessageFramework"
                           xmlns:implementation="clr-namespace:MPDisplay.Common.Controls.Surface3D;assembly=MPDisplay.UICommon"
			 xmlns:implementation1="clr-namespace:MPDisplay.Common.Controls;assembly=MPDisplay.UICommon"
			 mc:Ignorable="d" 
			 x:Name="UI"
             d:DesignHeight="300" d:DesignWidth="300"
			 Canvas.Left="{Binding BaseXml.PosX,Mode=OneWay}"
			 Canvas.Top="{Binding BaseXml.PosY,Mode=OneWay}"
			 Canvas.ZIndex="{Binding BaseXml.PosZ,Mode=OneWay}"
			 Width="{Binding BaseXml.Width,Mode=OneWay}" 
			 Height="{Binding BaseXml.Height,Mode=OneWay}"
			 RotationX="{Binding BaseXml.Pos3DX,Mode=OneWay}"
			 RotationY="{Binding BaseXml.Pos3DY,Mode=OneWay}"
			 RotationZ="{Binding BaseXml.Pos3DZ,Mode=OneWay}"
			 RotationCenterX="{Binding BaseXml.Center3DX,Mode=OneWay}"
			 RotationCenterY="{Binding BaseXml.Center3DY,Mode=OneWay}"
			 RotationCenterZ="{Binding BaseXml.Center3DZ,Mode=OneWay}"
			 Visibility="{Binding IsControlVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
	<Border x:Name="background" Width="{Binding BaseXml.Width, Mode=OneWay}" Height="{Binding BaseXml.Height, Mode=OneWay}"  
                Background="{Binding BaseXml.ControlStyle.BackgroundBrush, Converter={StaticResource GUIBrushConverter}, Mode=OneWay}"
                BorderBrush="{Binding BaseXml.ControlStyle.BorderBrush, Converter={StaticResource GUIBrushConverter}, Mode=OneWay}"
                BorderThickness="{Binding BaseXml.ControlStyle.BorderThickness, Converter={StaticResource GUIThicknessConverter}, Mode=OneWay}"
                CornerRadius="{Binding BaseXml.ControlStyle.CornerRadius, Converter={StaticResource GUICornerRadiusConverter}, Mode=OneWay}" >
		<Border x:Name="focusShading" Background="{Binding BaseXml.ControlStyle.ShadeBrush, Converter={StaticResource GUIBrushConverter}, Mode=OneWay}" CornerRadius="{Binding ElementName=background, Path=CornerRadius, Mode=OneWay}">
            <ListBox x:Name="listbox" ItemsSource="{Binding ListItems}" 
                 IsSynchronizedWithCurrentItem="True"
                 KeyboardNavigation.DirectionalNavigation="Cycle" 
                 VirtualizingStackPanel.IsContainerVirtualizable="True"
                 VirtualizingPanel.IsVirtualizing="True"
                 VirtualizingStackPanel.VirtualizationMode="Recycling"
                 VirtualizingStackPanel.ScrollUnit="Pixel"
                 VirtualizingStackPanel.CacheLength="5,5"
                 VirtualizingStackPanel.CacheLengthUnit="Page"
                 ScrollViewer.PanningMode="Both"
				 ScrollViewer.PanningRatio="1"
				 ScrollViewer.VerticalScrollBarVisibility="Hidden"
				 ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                 ScrollViewer.CanContentScroll="True"
 				 Background="Transparent"
                 >

                <ListBox.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent"/>
					<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
					<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />

					<Style TargetType="ListBoxItem">
						<Setter Property="BorderThickness" Value="0" />
						<Setter Property="BorderBrush" Value="Transparent" />
						<Setter Property="FocusVisualStyle" Value="{x:Null}" />
						<Setter Property="VerticalAlignment" Value="{Binding CurrentLayout.VerticalAlignment, ElementName=UI}" />
						<Setter Property="HorizontalAlignment" Value="{Binding CurrentLayout.HorizontalAlignment, ElementName=UI}" />
                        <EventSetter Event="Selected" Handler="OnListItem_Selected" />
                        <EventSetter Event="PreviewMouseDown" Handler="OnListItem_PreviewMouseDown" />
                        <EventSetter Event="PreviewMouseUp" Handler="OnListItem_PreviewMouseUp" />
                        <EventSetter Event="PreviewMouseDoubleClick" Handler="OnListItem_PreviewMouseDoubleClick" />

                        <!-- Windows8 -->
						<Setter Property="Background" Value="Transparent" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}">
                                        <ContentPresenter />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
				</ListBox.Resources>

				<ListBox.Style>
					<Style TargetType="ListBox">
						<Setter Property="BorderBrush" Value="{x:Null}" />
						<Setter Property="BorderThickness" Value="0" />
						<Setter Property="ScrollViewer.PanningDeceleration" Value="0.009" />
						<Style.Triggers>
							<DataTrigger Binding="{Binding ListLayoutType, ElementName=UI}" Value="Vertical" >
								<Setter Property="ScrollViewer.PanningDeceleration" Value="0.001" />
							</DataTrigger>
                            <DataTrigger Binding="{Binding ListLayoutType, ElementName=UI}" Value="VerticalIcon" >
                                <Setter Property="ScrollViewer.PanningDeceleration" Value="0.001" />
                            </DataTrigger>
                        </Style.Triggers>
					</Style>
				</ListBox.Style>

				<ListBox.ItemsPanel>
					<ItemsPanelTemplate>
						<VirtualizingStackPanel >
							<VirtualizingStackPanel.Style>
								<Style TargetType="VirtualizingStackPanel">
									<Setter Property="Orientation" Value="Horizontal" />
									<Setter Property="Margin" Value="0" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding ListLayoutType, ElementName=UI}" Value="Vertical" >
											<Setter Property="Orientation" Value="Vertical" />
										</DataTrigger>
                                        <DataTrigger Binding="{Binding ListLayoutType, ElementName=UI}" Value="VerticalIcon" >
                                            <Setter Property="Orientation" Value="Vertical" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ListLayoutType, ElementName=UI}" Value="Auto" >
											<Setter Property="Orientation" Value="Vertical" />
										</DataTrigger>
										<DataTrigger Binding="{Binding ListLayoutType, ElementName=UI}" Value="CoverFlow" >
											<Setter Property="Margin" Value="0,20,0,20" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</VirtualizingStackPanel.Style>
						</VirtualizingStackPanel>
					</ItemsPanelTemplate>
				</ListBox.ItemsPanel>

				<ListBox.ItemTemplate>
					<DataTemplate DataType="{x:Type messageObjects:APIListItem}">
						<implementation:Surface3D  x:Name="surface3d" IsHitTestVisible="False" UseLayoutRounding="True"
					Width="{Binding CurrentLayout.Width, ElementName=UI,Mode=OneWay}" 
					Height="{Binding CurrentLayout.Height, ElementName=UI,Mode=OneWay}"
					Margin="{Binding CurrentLayout.ItemMargin, Converter={StaticResource GUIThicknessConverter},Mode=OneWay, ElementName=UI}"  >
							<implementation:Surface3D.LayoutTransform>
								<ScaleTransform  ScaleX="1"  ScaleY="1" />
							</implementation:Surface3D.LayoutTransform>
							<implementation:Surface3D.Style>
								<Style TargetType="{x:Type implementation:Surface3D}">
									<Style.Triggers>
										<!--Layout CoverFlow //////////////////////////////////////////////////////////////////////////////////////////////////-->
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding ListLayoutType, ElementName=UI}" Value="CoverFlow" />
												<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True"/>
											</MultiDataTrigger.Conditions>
											<MultiDataTrigger.EnterActions>
												<BeginStoryboard HandoffBehavior="SnapshotAndReplace" >
													<Storyboard >
														<DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="RotationY" To="0"  />
													</Storyboard>
												</BeginStoryboard>
											</MultiDataTrigger.EnterActions>
										</MultiDataTrigger>

										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding ListLayoutType, ElementName=UI}" Value="CoverFlow" />
												<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="False"/>
												<Condition Value="False">
													<Condition.Binding>
														<MultiBinding Converter="{StaticResource GreaterThanSelectedIndexConverter}" >
															<Binding Path="SelectedIndex" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ListBox}}" Mode="OneWay" />
															<Binding Path="Index" Mode="OneWay"/>
														</MultiBinding>
													</Condition.Binding>
												</Condition>
											</MultiDataTrigger.Conditions>
											<MultiDataTrigger.EnterActions>
												<BeginStoryboard Name="CLowerEnter" HandoffBehavior="SnapshotAndReplace" >
													<Storyboard>
														<DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="RotationY" To="20" />
													</Storyboard>
												</BeginStoryboard>
											</MultiDataTrigger.EnterActions>
											<MultiDataTrigger.ExitActions>
												<StopStoryboard BeginStoryboardName="CLowerEnter"/>
											</MultiDataTrigger.ExitActions>
										</MultiDataTrigger>

										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding ListLayoutType, ElementName=UI}" Value="CoverFlow" />
												<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="False"/>
												<Condition Value="True">
													<Condition.Binding>
														<MultiBinding Converter="{StaticResource GreaterThanSelectedIndexConverter}" >
															<Binding Path="SelectedIndex" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ListBox}}" Mode="OneWay" />
															<Binding Path="Index" Mode="OneWay" />
														</MultiBinding>
													</Condition.Binding>
												</Condition>
											</MultiDataTrigger.Conditions>
											<MultiDataTrigger.EnterActions>
												<BeginStoryboard Name="CHigherEnter" HandoffBehavior="SnapshotAndReplace" >
													<Storyboard>
														<DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="RotationY" To="-20" />
													</Storyboard>
												</BeginStoryboard>
											</MultiDataTrigger.EnterActions>
											<MultiDataTrigger.ExitActions>
												<StopStoryboard BeginStoryboardName="CHigherEnter"/>
											</MultiDataTrigger.ExitActions>
										</MultiDataTrigger>
									</Style.Triggers>
								</Style>
							</implementation:Surface3D.Style>

							<!-- Item Template //////////////////////////////////////////////////////////////////////////////////////////////////-->
							<Border x:Name="focus" 
						        Width="{Binding ActualWidth,ElementName=surface3d,Mode=OneWay}" 
								Height="{Binding Height,ElementName=surface3d,Mode=OneWay}"
                                BorderThickness="{Binding CurrentLayout.BorderThickness, Converter={StaticResource GUIThicknessConverter},Mode=OneWay, ElementName=UI}"
                                CornerRadius="{Binding CurrentLayout.CornerRadius, Converter={StaticResource GUICornerRadiusConverter},Mode=OneWay, ElementName=UI}" >
								<Border.Style>
									<Style TargetType="Border" >
										<Setter Property="Background" Value="{Binding CurrentLayout.NoFocusBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
										<Setter Property="BorderBrush" Value="{Binding CurrentLayout.NoFocusBorderBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
												<Setter Property="Background" Value="{Binding CurrentLayout.FocusBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
												<Setter Property="BorderBrush" Value="{Binding CurrentLayout.FocusBorderBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Border.Style>
								<Grid>
									<Border x:Name="Shading" 
                                        Background="{Binding CurrentLayout.ShadeBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" 
                                        CornerRadius="{Binding ElementName=focus, Path=CornerRadius,Mode=OneWay}">
										<Grid>
											<!--Image-->
											<Border x:Name="imgBorder" 
										        Margin="{Binding CurrentLayout.ImageMargin, Converter={StaticResource GUIThicknessConverter},Mode=OneWay, ElementName=UI}"
												HorizontalAlignment="{Binding CurrentLayout.ImageHorizontalAlignment,Mode=OneWay, ElementName=UI}" 
						                        VerticalAlignment="{Binding CurrentLayout.ImageVerticalAlignment,Mode=OneWay, ElementName=UI}"
												Visibility="{Binding CurrentLayout.EnableImage, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=UI}">
												<implementation1:RoundedImage 
														  Stretch="{Binding CurrentLayout.ImageStretch,Mode=OneWay, ElementName=UI}"
														  Source="{Binding Image, Converter={StaticResource GUIImageConverter}}"
														  CornerRadius="{Binding CurrentLayout.ImageCornerRadius,Mode=OneWay, ElementName=UI}" >
												</implementation1:RoundedImage>
												<Border.Style>
													<Style TargetType="Border">
														<Setter Property="Background" Value="{Binding CurrentLayout.DefaultImage, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding Image.IsEmpty}" Value="False">
																<Setter Property="Background" Value="Transparent" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--Image2-->
											<Border x:Name="imgBorder2" 
										        Margin="{Binding CurrentLayout.Image2Margin, Converter={StaticResource GUIThicknessConverter},Mode=OneWay, ElementName=UI}"
												HorizontalAlignment="{Binding CurrentLayout.Image2HorizontalAlignment,Mode=OneWay, ElementName=UI}" 
						                        VerticalAlignment="{Binding CurrentLayout.Image2VerticalAlignment,Mode=OneWay, ElementName=UI}"
												Visibility="{Binding CurrentLayout.EnableImage2, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=UI}">
												<implementation1:RoundedImage 
														  Stretch="{Binding CurrentLayout.Image2Stretch,Mode=OneWay, ElementName=UI}"
														  Source="{Binding Image2, Converter={StaticResource GUIImageConverter}}"
														  CornerRadius="{Binding CurrentLayout.Image2CornerRadius,Mode=OneWay, ElementName=UI}" >
												</implementation1:RoundedImage>
												<Border.Style>
													<Style TargetType="Border">
														<Setter Property="Background" Value="{Binding CurrentLayout.DefaultImage2, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding Image2.IsEmpty}" Value="False">
																<Setter Property="Background" Value="Transparent" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--Image3-->
											<Border x:Name="imgBorder3"
										        Margin="{Binding CurrentLayout.Image3Margin, Converter={StaticResource GUIThicknessConverter},Mode=OneWay, ElementName=UI}"
												HorizontalAlignment="{Binding CurrentLayout.Image3HorizontalAlignment,Mode=OneWay, ElementName=UI}" 
						                        VerticalAlignment="{Binding CurrentLayout.Image3VerticalAlignment,Mode=OneWay, ElementName=UI}"
												Visibility="{Binding CurrentLayout.EnableImage3, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=UI}">
												<implementation1:RoundedImage 
														  Stretch="{Binding CurrentLayout.Image3Stretch,Mode=OneWay, ElementName=UI}"
														  Source="{Binding Image3, Converter={StaticResource GUIImageConverter}}"
														  CornerRadius="{Binding CurrentLayout.Image3CornerRadius,Mode=OneWay, ElementName=UI}" >
												</implementation1:RoundedImage>
												<Border.Style>
													<Style TargetType="Border">
														<Setter Property="Background" Value="{Binding CurrentLayout.DefaultImage3, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
														<Style.Triggers>
															<Trigger Property="IsMouseDirectlyOver" Value="True" >
															</Trigger>
															<DataTrigger Binding="{Binding Image3.IsEmpty}" Value="False">
																<Setter Property="Background" Value="Transparent" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</Border.Style>
											</Border>

											<!--Label1-->
											<TextBlock Visibility="{Binding CurrentLayout.EnableLabel, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=UI}"
											   Text="{Binding Label}"
											   HorizontalAlignment="{Binding CurrentLayout.LabelHorizontalAlignment,Mode=OneWay, ElementName=UI}" 
						                       VerticalAlignment="{Binding CurrentLayout.LabelVerticalAlignment,Mode=OneWay, ElementName=UI}"
											   FontFamily="{Binding CurrentLayout.FontType, Converter={StaticResource GUIFontConverter},Mode=OneWay, ElementName=UI}" 
											   FontSize="{Binding CurrentLayout.FontSize,Mode=OneWay, ElementName=UI}" 
											   FontWeight="{Binding CurrentLayout.FontWeight, Converter={StaticResource GUIFontConverter},Mode=OneWay, ElementName=UI}"
											   Margin="{Binding CurrentLayout.LabelMargin, ElementName=UI, Converter={StaticResource GUIThicknessConverter}}" >
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Foreground" Value="{Binding CurrentLayout.NoFocusFontBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
																<Setter Property="Foreground" Value="{Binding CurrentLayout.FocusFontBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<!--Label2-->
											<TextBlock Visibility="{Binding CurrentLayout.EnableLabel2, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=UI}"
											   Text="{Binding Label2}"
											   HorizontalAlignment="{Binding CurrentLayout.Label2HorizontalAlignment,Mode=OneWay, ElementName=UI}" 
						                       VerticalAlignment="{Binding CurrentLayout.Label2VerticalAlignment,Mode=OneWay, ElementName=UI}"
											   FontFamily="{Binding CurrentLayout.Label2FontType, Converter={StaticResource GUIFontConverter},Mode=OneWay, ElementName=UI}" 
											   FontSize="{Binding CurrentLayout.Label2FontSize,Mode=OneWay, ElementName=UI}" 
											   FontWeight="{Binding CurrentLayout.Label2FontWeight, Converter={StaticResource GUIFontConverter},Mode=OneWay, ElementName=UI}"
											   Margin="{Binding CurrentLayout.Label2Margin, ElementName=UI, Converter={StaticResource GUIThicknessConverter}}" >
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Foreground" Value="{Binding CurrentLayout.Label2NoFocusFontBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
																<Setter Property="Foreground" Value="{Binding CurrentLayout.Label2FocusFontBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<!--Label3-->
											<TextBlock Visibility="{Binding CurrentLayout.EnableLabel3, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=UI}"
											   Text="{Binding Label3}"
											   HorizontalAlignment="{Binding CurrentLayout.Label3HorizontalAlignment,Mode=OneWay, ElementName=UI}" 
						                       VerticalAlignment="{Binding CurrentLayout.Label3VerticalAlignment,Mode=OneWay, ElementName=UI}"
											   FontFamily="{Binding CurrentLayout.Label3FontType, Converter={StaticResource GUIFontConverter},Mode=OneWay, ElementName=UI}" 
											   FontSize="{Binding CurrentLayout.Label3FontSize,Mode=OneWay, ElementName=UI}" 
											   FontWeight="{Binding CurrentLayout.Label3FontWeight, Converter={StaticResource GUIFontConverter},Mode=OneWay, ElementName=UI}"
											   Margin="{Binding CurrentLayout.Label3Margin, ElementName=UI, Converter={StaticResource GUIThicknessConverter}}" >
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Foreground" Value="{Binding CurrentLayout.Label3NoFocusFontBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
																<Setter Property="Foreground" Value="{Binding CurrentLayout.Label3FocusFontBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

										</Grid>
									</Border>
									<Border x:Name="Gloss" 
										Background="{Binding CurrentLayout.GlossBrush, Converter={StaticResource GUIBrushConverter},Mode=OneWay, ElementName=UI}" 
										CornerRadius="{Binding ElementName=focus, Path=CornerRadius,Mode=OneWay}" />
								</Grid>

							</Border>
						</implementation:Surface3D>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Border>
	</Border>



</base:GUIDraggableListView>
